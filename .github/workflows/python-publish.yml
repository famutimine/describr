# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'  # Ensures you get all history for all branches and tags
        token: ${{ secrets.GENERAL_ACCESS_TOKEN }}  # Allows pushing back to the repository

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine bump2version

    - name: Bump version and commit changes
      if: contains(github.event.head_commit.message, '[bump version]')
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        bump2version patch  # Or minor or major, depending on your strategy
        git push --follow-tags
      env:
        GITHUB_TOKEN: ${{ secrets.GENERAL_ACCESS_TOKEN }}

    - name: Build and publish
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
